{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/removing-label-overlapping-from-pretty-charts","result":{"data":{"post":{"__typename":"MdxPost","slug":"/removing-label-overlapping-from-pretty-charts","title":"Removing label overlapping from pretty charts","date":"06.03.2018","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"javascript","slug":"javascript"},{"name":"data-visualization","slug":"data-visualization"},{"name":"charts","slug":"charts"}],"description":"Removal of label overlapping on charts using simulated annealing","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Removing label overlapping from pretty charts\",\n  \"date\": \"2018-03-06T00:00:00.000Z\",\n  \"description\": \"Removal of label overlapping on charts using simulated annealing\",\n  \"tags\": [\"Tutorial\", \"javascript\", \"data-visualization\", \"charts\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"(Originally published on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@adarshlilha/removing-label-overlapping-from-pretty-charts-8dd2e3581b71\"\n  }), \"medium\"), \")\"), mdx(\"p\", null, \"Very often I used to encounter pretty charts which would make me wonder how can this be built using code? I started off with native SVG, Canvas API but then I came across D3 which exhibits phenomenal concept of joining data with DOM elements. D3 describes itself as \\u2014\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CA JavaScript library for producing dynamic, interactive data visualizations in web browsers with HTML,SVG and CSS\\u201D\")), mdx(\"p\", null, \"Since I was already into Javascript, this seemed fantastic. Really? Javascript can do this? I thought. Well JS is everywhere, so hands down it can!\"), mdx(\"p\", null, \"I picked up the basics of D3 - \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/d3/d3-scale\"\n  }), \"scales\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/d3/d3-transition\"\n  }), \"transitions\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/d3/d3-selection\"\n  }), \"selections\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/d3/d3-voronoi\"\n  }), \"voronoi\"), \" and built few small charts to understand it better.\"), mdx(\"p\", null, \"But whenever I had gone ahead to draw a chart in browser, one issue inherently made me go crazy was handling labels overlapping. Such a common problem, but no directed solution. I tried to devise algorithm to handle this but either I was not going anywhere or it was never reaching to a solution (approximation problem, as you might have guessed rightly).\"), mdx(\"p\", null, \"This article is mostly about me taking you on my learning journey. So if you feel I am wrong, or there are better ways to address this, please feel free to comment to the thread.\"), mdx(\"h2\", null, \"Before we start\"), mdx(\"p\", null, \"In this article I start off with building a simple bubble plot from a real dataset and address the label overlapping elephant. You can find the complete code \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt\"\n  }), \"here\"), \".\"), mdx(\"h2\", null, \"Lets sit and draw\"), mdx(\"p\", null, \"I always wanted to create \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://informationisbeautiful.net/visualizations/star-wars-last-jedi-one-of-the-biggest-rotten-tomatoes-audience-vs-critics-score-splits-ever/\"\n  }), \"this\"), \" myself as I can connect with the paradigm so well. So here I will try to replicate the same chart to the best of my ability.\"), mdx(\"p\", null, \"I grabbed the csv \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://bit.ly/IIB_MovieLove\"\n  }), \"dataset\"), \" from the website and started off with the most atomic components of any chart.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Scales\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Marks\"))), mdx(\"p\", null, \"Here is a glance of the code which creates scale. If you already know this, feel free to jump to the next section.\"), mdx(Gist, {\n    id: \"d200ff2ff0c6dea0f0fd05deab4950f7\",\n    file: \"gistfile1.txt\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"After we\\u2019re up with scales and axes, we append them to the SVG.\"), mdx(Gist, {\n    id: \"41cdc1160a5ad9b6451dac05a69dc538\",\n    file: \"gistfile1.txt\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"Since we are done with scales, its time to draw the marks.\"), mdx(\"p\", null, \"We add circles, define the x position (cx), y position (cy), radius (r) and tweak few other encoding channel (fill) and cosmetic (stroke)\"), mdx(Gist, {\n    id: \"0bdc3f87cd1c4f5987ec247e6e451d1d\",\n    file: \"gistfile1.txt\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/600/1*O_1if8yktDnl9Lum_z2cjA.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"We now see bubbles corresponding to movies positioned by scales.\"), mdx(\"p\", null, \"Won\\u2019t it be great if we are able to understand which circle represents which movie?\"), mdx(\"p\", null, \"Time to add the labels besides each circle! Let\\u2019s start off by adding text elements besides each circle.\"), mdx(Gist, {\n    id: \"58cd5b316bb1077c854baff8b28a8df6\",\n    file: \"gistfile1.txt\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/600/1*2m9okPRJq9_ux29ZD6qC9w.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"This is what I was talking about. The labels are getting overlapped and we end up with a gibberish looking chart. I wish d3 had given a way to fix this. But if you think logically it\\u2019s not d3\\u2019s job to fix this. Since we are on our own, let\\u2019s use an overlap reducing algorithm!\"), mdx(\"h2\", null, \"Let\\u2019s tame the dragon\"), mdx(\"p\", null, \"We use the concept of simulated annealing to remove overlaps.\"), mdx(\"blockquote\", null, mdx(\"h5\", {\n    parentName: \"blockquote\"\n  }, \"To understand what annealing is and how it works for us here, \", mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"http://vis.berkeley.edu/courses/cs294-10-fa13/wiki/images/5/55/FP_EvanWang_paper.pdf\"\n  }), \"go through this paper\"))), mdx(\"p\", null, \"The idea is something like this. You have to have a quantifiable value which is representative of the label position\\u2019s quality. This quality is function of overlapping, distance, orientation etc. We will try to minimise the value to find the best position for our label. There are different method for minimisation. Simulated annealing is one of the many useful one.\"), mdx(\"p\", null, \"Take your time to read and understand the concept of how annealing works, Not the code yet but the mechanism of energy, weights and cooling and how can they be used together. It\\u2019s not simple, but not very difficult also. If you have understood 10% of it then you probably have mastered it.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt/blob/master/label.js\"\n  }), \"This\"), \" is an implementation of the same annealing technique we read above. We will now have a deeper look at the algorithm.\"), mdx(\"h3\", null, \"Understanding the flow\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    d3.labeler()\\n      .label(labelArray)\\n      .anchor(anchorArray)\\n      .width(width)\\n      .height(height)\\n      .start(2000);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"label\"), \" takes an array of objects with x, y, name, width, height (labelArray)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  { x: 115, y: 580, name: \\u201CWalk Hard\\u201D, width: 30, height: 8 }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"anchor\"), \" takes in the array of objects with x, y, radius of circle (anchorArray)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  { x: 105, y: 600, r: 7 }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"width\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"height\"), \" of the canvas. If a label crosses the boundary, it\\u2019s position remains unchanged.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"function \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"start\"), \" initiates the annealing process. The parameter it gets (2000) is the iteration it does find out the global minima of the annealing process.\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt/blob/master/label.js\"\n  }), \"Label.js\"), \" is the one which does the magic.\"), mdx(\"h3\", null, \"Annealing Algorithm\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2000/1*wPrfBbFPz8ZFkBIkLovoUw.png\",\n    \"alt\": \"Algorithm for removing overlaps with annealing\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Algorithm for removing overlaps with annealing\")), mdx(\"p\", null, \"All its saying is, tweak the position of a label keeping every other labels fixed. This tweaking is what we are calling \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"configuration \"), \"in the algorithm. For the new configuration decide whether the new one is better than the previous one.\"), mdx(\"p\", null, \"Lets explore the algorithm block by block\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Steps\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"First it all starts off by either rotating or moving(translating) labels to a new position.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Energy is calculated before and after the change using the current position(x, y) and weightage of the overlap.\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Energy\"), \" is a function which gives the value of the quantitive measure using which we can qualify the quality of the placement.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If change in energy < 0, keep the new position of the label. It\\u2019s better than what we had in the last configuration.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If change in energy > 0, then for \"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"higher value of T introduce a higher probability of accepting it \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lower value of T introduce a lower probability of accepting it\\nThe exponential term ensures the dynamic probability assignment to the system and random number is used to have a randomness in acceptance of the probability.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Decrease the temperature slightly for each iteration. We have initially set it to 1. More the temperature, higher the changes of accepting the new position. Initially annealing accepts all changes and slowly optimises again by lowering temperature.\")), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"Understanding the code\")), mdx(\"p\", null, \"Open the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt/blob/master/label.js\"\n  }), \"label.js\"), \" file and have a look. A couple of small functions - \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"width\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"height\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"label\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"anchor \"), \"are self explanatory. They just initialise the global variables with the values passed by the user.\"), mdx(\"p\", null, \"Next is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"start\"), \" function, this is where everything starts. We assume temperature to be 1.0 and loop a finite amount of times, inside which we iterate the labelArray and then either perform a move or rotate. Also in the end we decrease the temperature by a small amount.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mcmove function\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take any random index of the array\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  var i = Math.floor(Math.random() * lab.length);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Store it\\u2019s (x, y) co-ordinates in two variables\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  var x_old = lab[i].x;\\n  var y_old = lab[i].y;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Calculate energy\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  var oldEnergy = energy(i);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move label to a new position\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  lab[i].x += (Math.random() \\u2014 0.5) * max_move;\\nlab[i].y += (Math.random() \\u2014 0.5) * max_move;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If new position exceeds the boundary, go back to old position we stored in step 2\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  if (lab[i].x > w) { lab[i].x = x_old; }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Calculate energy again\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  var newEnergy = energy(i);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check if\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  Math.random < e^((new energy - old energy) / temperature)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If yes, do nothing as we have already moved to new position.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if not, move back to old position using the (x, y) we stored in step 2.\")), mdx(\"p\", null, \"In the above steps we calculated \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"energy\"), \" twice. Let\\u2019s unravel it now.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"energy function\")), mdx(\"p\", null, \"Here we increment total energy value for whatever overlapping cases we want to handle and return the total.\"), mdx(\"p\", null, \"For label-label overlaps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We store the values of four corners of the rect bounding the label in x21, y21, x22 and y22 variables\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    var x21 = lab[index].x,\\n        y21 = lab[index].y \\u2014 lab[index].height + 2.0,\\n        x22 = lab[index].x + lab[index].width,\\n        y22 = lab[index].y + 2.0;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Iterate over all the labels and calculate the rect corners of all other labels and also find out the area of overlapping.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    for (var i = 0; i < m; i++) {\\n        if (i != index) {\\n             //label-label overlap\\n             //positions of 4 corners of rect bounding the text\\n             x11 = lab[i].x,\\n             y11 = lab[i].y \\u2014 lab[i].height + 2.0,\\n             x12 = lab[i].x + lab[i].width,\\n             y12 = lab[i].y + 2.0;\\n             x_overlap = Math.max(0, Math.min(x12, x22) \\u2014 Math.max(x11, x21));\\n             y_overlap = Math.max(0, Math.min(y12, y22) \\u2014 Math.max(y11, y21));\\n             overlap_area = x_overlap * y_overlap;\\n             ener += (overlap_area * weight_label);\\n    }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiply the overlapped area with weight_label and add it to energy\", mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Weights represent the intensity of the label overlap in the chart. More the weight, higher the intensity, so that label will go to a new position.\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    var weight_label = 30.0,\\n        weight_label_anc = 30.0,\\n        weight_len = 0.2;\\n\")), mdx(\"p\", null, \"We have given more weightage of two labels overlapping and a label overlapping with an anchor(circle), than label overlapping with it\\u2019s link line.\"), mdx(\"p\", null, \"After this\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \", repeat\"), \" the same process for other overlaps, ex - label-anchor(circles)** **overlaps, adding to energy.\"), mdx(\"p\", null, \"If we have an overlap to be fixed, we are adding a value to overlap which evaluates the condition\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  (Math.random() < Math.exp(-delta_energy / currTemp))\\n\")), mdx(\"p\", null, \"to be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \", accepting the new position of the moved label.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cooling Temperature function\")), mdx(\"p\", null, \"Lastly, we also decrease the temperature by a small amount on each iteration according to the algorithm.\"), mdx(\"h3\", null, \"Wrapping Up\"), mdx(\"p\", null, \"Finally, we move back to our html file\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"create an array with\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" x, y, radiu\"), \"s values of circles(AnchorArray) and\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"create second array with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"x, y, name, width, height\"), \", values of labels(labelArray)\"))), mdx(\"p\", null, \"and pass them to our annealing code (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt/blob/master/label.js\"\n  }), \"label.js\"), \"). This is pretty straightforward so have a look.\"), mdx(\"p\", null, \"As a touchup, we add some \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt/blob/master/style.css\"\n  }), \"styling\"), \" to our chart, lines connecting labels to the circle it represents and also render the labels and lines with new position with some transition\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  labels\\n      .transition()\\n      .duration(1500)\\n      .attr(\\u201Cx\\u201D, (d) => d.x)\\n      .attr(\\u201Cy\\u201D, (d) => d.y);\\n\")), mdx(\"p\", null, \"Once done, this is what we get!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/995/1*m4fCm1iyYxo-5O3E2cce4A.gif\",\n    \"alt\": \"Removing overlaps with transition\"\n  }))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nsweeps why?\")), mdx(\"p\", null, \"At this point one question pops up in my head-\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CWhy do we pass 1000 to start function and iterate 1000 times only. This is not what the algorithm says.\\u201D\")), mdx(\"p\", null, \"Yes, at first this may seem weird but it is required because if the dataset grows big, it may not be possible to remove overlaps. At that point the program may get stuck in an infinite loop. This is done to get the optimum output and prevent that from happening simultaneously.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"References and Resources\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"D3-Labeler \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vis.berkeley.edu/courses/cs294-10-fa13/wiki/images/5/55/FP_EvanWang_paper.pdf\"\n  }), \"Paper\"), \" by Evan Wang\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tinker10/D3-Labeler\"\n  }), \"D3-Labeler\"), \" code for reference\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://gifbrewery.com/\"\n  }), \"GIF Brewery\"), \" to create the gifs\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Contribute\")), mdx(\"p\", null, \"Would like to improve the technique or code? Feel free to reach out.\\nContribute on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adarshlilha/movie-gap-rt\"\n  }), \"github\")), mdx(\"p\", null, \"Thanks for reading, If you liked the article, consider upvoting on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@adarshlilha/removing-label-overlapping-from-pretty-charts-8dd2e3581b71\"\n  }), \"Medium\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"(Originally published on  medium ) Very often I used to encounter pretty charts which would make me wonder how can this be built using code…","timeToRead":6,"banner":null}},"pageContext":{"slug":"/removing-label-overlapping-from-pretty-charts","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}